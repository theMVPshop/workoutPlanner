{"ast":null,"code":"export let auto = false;\nexport let kind = undefined;\nexport let fetch = undefined;\nexport let Request = undefined;\nexport let Response = undefined;\nexport let Headers = undefined;\nexport let FormData = undefined;\nexport let Blob = undefined;\nexport let File = undefined;\nexport let getMultipartRequestOptions = undefined;\nexport let getDefaultAgent = undefined;\nexport let fileFromPath = undefined;\nexport let isFsReadStream = undefined;\nexport function setShims(shims, options = {\n  auto: false\n}) {\n  if (auto) {\n    throw new Error(`you must \\`import 'openai/shims/${shims.kind}'\\` before importing anything else from openai`);\n  }\n  if (kind) {\n    throw new Error(`can't \\`import 'openai/shims/${shims.kind}'\\` after \\`import 'openai/shims/${kind}'\\``);\n  }\n  auto = options.auto;\n  kind = shims.kind;\n  fetch = shims.fetch;\n  Request = shims.Request;\n  Response = shims.Response;\n  Headers = shims.Headers;\n  FormData = shims.FormData;\n  Blob = shims.Blob;\n  File = shims.File;\n  getMultipartRequestOptions = shims.getMultipartRequestOptions;\n  getDefaultAgent = shims.getDefaultAgent;\n  fileFromPath = shims.fileFromPath;\n  isFsReadStream = shims.isFsReadStream;\n}","map":{"version":3,"names":["auto","kind","undefined","fetch","Request","Response","Headers","FormData","Blob","File","getMultipartRequestOptions","getDefaultAgent","fileFromPath","isFsReadStream","setShims","shims","options","Error"],"sources":["C:\\Users\\12818\\Documents\\MVPworkshop\\workoutPlanner\\sweat-smart\\node_modules\\openai\\src\\_shims\\registry.ts"],"sourcesContent":["/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nimport { type RequestOptions } from '../core';\n\nexport interface Shims {\n  kind: string;\n  fetch: any;\n  Request: any;\n  Response: any;\n  Headers: any;\n  FormData: any;\n  Blob: any;\n  File: any;\n  getMultipartRequestOptions: <T extends {} = Record<string, unknown>>(\n    form: Shims['FormData'],\n    opts: RequestOptions<T>,\n  ) => Promise<RequestOptions<T>>;\n  getDefaultAgent: (url: string) => any;\n  fileFromPath:\n    | ((path: string, filename?: string, options?: {}) => Promise<Shims['File']>)\n    | ((path: string, options?: {}) => Promise<Shims['File']>);\n  isFsReadStream: (value: any) => boolean;\n}\n\nexport let auto = false;\nexport let kind: Shims['kind'] | undefined = undefined;\nexport let fetch: Shims['fetch'] | undefined = undefined;\nexport let Request: Shims['Request'] | undefined = undefined;\nexport let Response: Shims['Response'] | undefined = undefined;\nexport let Headers: Shims['Headers'] | undefined = undefined;\nexport let FormData: Shims['FormData'] | undefined = undefined;\nexport let Blob: Shims['Blob'] | undefined = undefined;\nexport let File: Shims['File'] | undefined = undefined;\nexport let getMultipartRequestOptions: Shims['getMultipartRequestOptions'] | undefined = undefined;\nexport let getDefaultAgent: Shims['getDefaultAgent'] | undefined = undefined;\nexport let fileFromPath: Shims['fileFromPath'] | undefined = undefined;\nexport let isFsReadStream: Shims['isFsReadStream'] | undefined = undefined;\n\nexport function setShims(shims: Shims, options: { auto: boolean } = { auto: false }) {\n  if (auto) {\n    throw new Error(\n      `you must \\`import 'openai/shims/${shims.kind}'\\` before importing anything else from openai`,\n    );\n  }\n  if (kind) {\n    throw new Error(`can't \\`import 'openai/shims/${shims.kind}'\\` after \\`import 'openai/shims/${kind}'\\``);\n  }\n  auto = options.auto;\n  kind = shims.kind;\n  fetch = shims.fetch;\n  Request = shims.Request;\n  Response = shims.Response;\n  Headers = shims.Headers;\n  FormData = shims.FormData;\n  Blob = shims.Blob;\n  File = shims.File;\n  getMultipartRequestOptions = shims.getMultipartRequestOptions;\n  getDefaultAgent = shims.getDefaultAgent;\n  fileFromPath = shims.fileFromPath;\n  isFsReadStream = shims.isFsReadStream;\n}\n"],"mappings":"AAyBA,OAAO,IAAIA,IAAI,GAAG,KAAK;AACvB,OAAO,IAAIC,IAAI,GAA8BC,SAAS;AACtD,OAAO,IAAIC,KAAK,GAA+BD,SAAS;AACxD,OAAO,IAAIE,OAAO,GAAiCF,SAAS;AAC5D,OAAO,IAAIG,QAAQ,GAAkCH,SAAS;AAC9D,OAAO,IAAII,OAAO,GAAiCJ,SAAS;AAC5D,OAAO,IAAIK,QAAQ,GAAkCL,SAAS;AAC9D,OAAO,IAAIM,IAAI,GAA8BN,SAAS;AACtD,OAAO,IAAIO,IAAI,GAA8BP,SAAS;AACtD,OAAO,IAAIQ,0BAA0B,GAAoDR,SAAS;AAClG,OAAO,IAAIS,eAAe,GAAyCT,SAAS;AAC5E,OAAO,IAAIU,YAAY,GAAsCV,SAAS;AACtE,OAAO,IAAIW,cAAc,GAAwCX,SAAS;AAE1E,OAAM,SAAUY,QAAQA,CAACC,KAAY,EAAEC,OAAA,GAA6B;EAAEhB,IAAI,EAAE;AAAK,CAAE;EACjF,IAAIA,IAAI,EAAE;IACR,MAAM,IAAIiB,KAAK,CACb,mCAAmCF,KAAK,CAACd,IAAI,gDAAgD,CAC9F;;EAEH,IAAIA,IAAI,EAAE;IACR,MAAM,IAAIgB,KAAK,CAAC,gCAAgCF,KAAK,CAACd,IAAI,oCAAoCA,IAAI,KAAK,CAAC;;EAE1GD,IAAI,GAAGgB,OAAO,CAAChB,IAAI;EACnBC,IAAI,GAAGc,KAAK,CAACd,IAAI;EACjBE,KAAK,GAAGY,KAAK,CAACZ,KAAK;EACnBC,OAAO,GAAGW,KAAK,CAACX,OAAO;EACvBC,QAAQ,GAAGU,KAAK,CAACV,QAAQ;EACzBC,OAAO,GAAGS,KAAK,CAACT,OAAO;EACvBC,QAAQ,GAAGQ,KAAK,CAACR,QAAQ;EACzBC,IAAI,GAAGO,KAAK,CAACP,IAAI;EACjBC,IAAI,GAAGM,KAAK,CAACN,IAAI;EACjBC,0BAA0B,GAAGK,KAAK,CAACL,0BAA0B;EAC7DC,eAAe,GAAGI,KAAK,CAACJ,eAAe;EACvCC,YAAY,GAAGG,KAAK,CAACH,YAAY;EACjCC,cAAc,GAAGE,KAAK,CAACF,cAAc;AACvC"},"metadata":{},"sourceType":"module","externalDependencies":[]}